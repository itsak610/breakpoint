doctype html
html(lang='en')
    head 
        meta(http-equiv='Content-Type' content='text/html; charset=UTF-8')
        meta(http-equiv='X-UA-Compatible' content='IE=edge')
        title (c)ypher
        meta(name='description', content='This page is created for the online cryptic hunt - De(c)pher.')
        meta(name='viewport' content='width=device-width, initial-scale=1')
        link(rel="shortcut icon" href="https://distracted-wescoff-b1d8d6.netlify.app/img/icon.ico?v=1" type="image/x-icon")
        link(rel="stylesheet" href="/css/register-student.css")
        style.
            a{
                color: #BF9B30;
            }
    body
        header
            .logo
                a(href='/home')
                    img(src='/img/cync_logo-converted.png' alt='cync' cursor-class='arrow')
            nav.navbar
                ul
                    li
                        a(href='/home' cursor-class='arrow') Home
                    li
                        a(href='/events' cursor-class='arrow') Events
                    li
                        a(href='/alumni' cursor-class='arrow') Alumni
                    li
                        a(href='/login' cursor-class='arrow') Login
                    li
                        a(href='/register' cursor-class='arrow') Register
        #canvas
        section
            #cursor
                .cursor__circle
            .container1
        script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r77/three.min.js')
        script.
            "use strict";

            // BACKGROUND
            var renderer, scene, camera, composer, particle;

            window.onload = function () {
            init();
            animate();
            };

            function init() {
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });

            renderer.setPixelRatio(window.devicePixelRatio ? window.devicePixelRatio : 1);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.autoClear = false;
            renderer.setClearColor(0x000000, 0.0);
            document.getElementById("canvas").appendChild(renderer.domElement);

            scene = new THREE.Scene();

            camera = new THREE.PerspectiveCamera(
                95,
                window.innerWidth / window.innerHeight,
                1,
                1000
            );
            camera.position.z = 500;
            scene.add(camera);

            particle = new THREE.Object3D();

            scene.add(particle);

            var geometry = new THREE.TetrahedronGeometry(2, 0);

            var material = new THREE.MeshPhongMaterial({
                color: 0xffffff,
                shading: THREE.FlatShading,
            });
            // number of particles - 1000
            for (var i = 0; i < 1000; i++) {
                var mesh = new THREE.Mesh(geometry, material);
                mesh.position
                .set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)
                .normalize();
                // closeness of particles
                mesh.position.multiplyScalar(90 + Math.random() * 1800);
                mesh.rotation.set(Math.random() * 2, Math.random() * 2, Math.random() * 2);
                particle.add(mesh);
            }

            var ambientLight = new THREE.AmbientLight(0x999999);
            scene.add(ambientLight);

            var lights = [];
            lights[0] = new THREE.DirectionalLight(0xFFBF00, 1);
            lights[0].position.set(1, 0, 0);
            lights[1] = new THREE.DirectionalLight(0xFFBF00, 1);
            lights[1].position.set(0.75, 1, 0.5);
            lights[2] = new THREE.DirectionalLight(0xFFCF40, 1);
            lights[2].position.set(-0.75, -1, 0.5);
            scene.add(lights[0]);
            scene.add(lights[1]);
            scene.add(lights[2]);

            window.addEventListener("resize", onWindowResize, false);
            }

            function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            }

            function animate() {
            requestAnimationFrame(animate);
            particle.rotation.x += 0.0;
            particle.rotation.y -= 0.0002;

            renderer.clear();
            renderer.render(scene, camera);
            }

            // CURSOR

            const cursor = document.querySelector("#cursor");
            const cursorCircle = cursor.querySelector(".cursor__circle");

            const mouse = { x: -100, y: -100 };
            const pos = { x: 0, y: 0 };
            const speed = 1;
            const updateCoordinates = (e) => {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
            };

            window.addEventListener("mousemove", updateCoordinates);

            function getAngle(diffX, diffY) {
            return (Math.atan2(diffY, diffX) * 180) / Math.PI;
            }

            function getSqueeze(diffX, diffY) {
            const distance = Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2));
            const maxSqueeze = 0.15;
            const accelerator = 1500;
            return Math.min(distance / accelerator, maxSqueeze);
            }

            const updateCursor = () => {
            const diffX = Math.round(mouse.x - pos.x);
            const diffY = Math.round(mouse.y - pos.y);

            pos.x += diffX * speed;
            pos.y += diffY * speed;

            const angle = getAngle(diffX, diffY);
            const squeeze = getSqueeze(diffX, diffY);

            const scale =
                "scale(" + ((1 + squeeze) * 2) / 3 + ", " + ((1 - squeeze) * 2) / 3 + ")";
            const rotate = "rotate(" + angle + "deg)";
            const translate = "translate3d(" + pos.x + "px ," + pos.y + "px, 0)";

            cursor.style.transform = translate;
            cursorCircle.style.transform = rotate + scale;
            };

            function loop() {
            updateCursor();
            requestAnimationFrame(loop);
            }

            requestAnimationFrame(loop);

            const cursorModifiers = document.querySelectorAll("[cursor-class]");

            cursorModifiers.forEach((curosrModifier) => {
            curosrModifier.addEventListener("mouseenter", function () {
                const className = this.getAttribute("cursor-class");
                cursor.classList.add(className);
            });

            curosrModifier.addEventListener("mouseleave", function () {
                const className = this.getAttribute("cursor-class");
                cursor.classList.remove(className);
            });
            });

            // Timer

            const countdown = () => {
                const countDate = new Date("July 20,2021 00:00:00").getTime();
                const now = new Date().getTime();
                const gap = countDate - now;
            
                const second = 1000;
                const minute = second * 60;
                const hour = minute * 60;
                const day = hour * 24;
            
                const textDay = Math.floor(gap / day);
                const textHour = Math.floor((gap % day) / hour);
                const textMinute = Math.floor((gap % hour) / minute);
                const textSecond = Math.floor((gap % minute) / second);
            
                document.querySelector(".day").innerText = textDay;
                document.querySelector(".hour").innerText = textHour;
                document.querySelector(".minute").innerText = textMinute;
                document.querySelector(".second").innerText = textSecond;
            };
            setInterval(countdown, 1000);
  